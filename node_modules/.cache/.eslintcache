[{"C:\\inrich.peter\\flip-book-react-master\\src\\index.js":"1","C:\\inrich.peter\\flip-book-react-master\\src\\App.js":"2","C:\\inrich.peter\\flip-book-react-master\\src\\serviceWorker.js":"3","C:\\inrich.peter\\flip-book-react-master\\src\\components\\Flipbook.js":"4","C:\\inrich.peter\\flip-book-react-master\\src\\helper.js":"5","C:\\inrich.peter\\flip-book-react-master\\src\\computed.js":"6","C:\\inrich.peter\\flip-book-react-master\\src\\Stores\\Flipbook.js":"7","C:\\inrich.peter\\flip-book-react-master\\src\\matrix.js":"8"},{"size":452,"mtime":1583168755000,"results":"9","hashOfConfig":"10"},{"size":286,"mtime":1583168755000,"results":"11","hashOfConfig":"10"},{"size":5085,"mtime":1583168755000,"results":"12","hashOfConfig":"10"},{"size":12786,"mtime":1583168755000,"results":"13","hashOfConfig":"10"},{"size":1770,"mtime":1583168755000,"results":"14","hashOfConfig":"10"},{"size":6107,"mtime":1583168755000,"results":"15","hashOfConfig":"10"},{"size":676,"mtime":1583168755000,"results":"16","hashOfConfig":"10"},{"size":729,"mtime":1583168755000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jt9337",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\inrich.peter\\flip-book-react-master\\src\\index.js",[],"C:\\inrich.peter\\flip-book-react-master\\src\\App.js",["36"],"import React, { useState } from \"react\";\nimport Flipbook from \"./components/Flipbook\";\nimport { Provider } from \"unstated\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider>\n      <div id=\"app\">\n        <Flipbook/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\inrich.peter\\flip-book-react-master\\src\\serviceWorker.js",[],"C:\\inrich.peter\\flip-book-react-master\\src\\components\\Flipbook.js",["37","38","39","40","41","42","43","44","45"],"import React, { useState, useEffect } from \"react\"\nimport { easeInOut } from \"../helper\"\nimport { Subscribe } from \"unstated\"\nimport FlipBookContainer from \"../Stores/Flipbook\";\nimport {\n  _canFlipLeft,\n  _canFlipRight,\n  _polygonArray,\n  _polygonBgSize,\n  _polygonHeight,\n  _polygonWidth\n} from '../computed'\nimport \"./Styles.css\"\n\nconst Flipbook = ({\n  flipDuration = 1000,\n  spaceTop = 0\n}) => {\n  const flipInit = {\n    progress: 0,\n    direction: null,\n    frontImage: null,\n    backImage: null,\n    auto: false\n  }\n\n  const {\n    pageWidth,\n    pageHeight,\n    pages,\n    leftPage,\n    rightPage\n  } = FlipBookContainer.state\n\n  const [nPages, setNPages] = useState(pages.length);\n  const [displayedPages, setDisplayedPages] = useState(1);\n  const [nImageLoad, setNImageLoad] = useState(0);\n  const [nImageLoadTrigger, setNImageLoadTrigger] = useState(0);\n  const [imageLoadCallback, setImageLoadCallback] = useState(null);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [touchStartX, setTouchStartX] = useState(null);\n  const [touchStartY, setTouchStartY] = useState(null);\n  const [hasPointerEvents, setHasPointerEvents] = useState(false);\n  const [minX, setMinX] = useState(Infinity);\n  const [maxX, setMaxX] = useState(-Infinity);\n  const [preloadedImages, setPreloadedImages] = useState({});\n  const [flip, setFlip] = useState(flipInit);\n  const [xMargin, setXMargin] = useState(0) // this.pageWidth * 2 - this.pageWidth * this.displayedPages) / 2\n  // computed\n  const canFlipLeft = _canFlipLeft(flip, currentPage, displayedPages, leftPage, pages)\n  const canFlipRight = _canFlipRight(flip, currentPage, nPages, displayedPages)\n  const polygonArray = _polygonArray(flip, displayedPages, pageWidth, xMargin, spaceTop, minX, maxX, setMinX, setMaxX)\n  const polygonBgSize = _polygonBgSize(pageWidth, pageHeight)\n  const polygonWidth = _polygonWidth(pageWidth)\n  const polygonHeight = _polygonHeight(pageHeight)\n\n  useEffect(() => {\n    onResize();\n    preloadImages();\n  }, []);\n\n  useEffect(() => {\n    FlipBookContainer.setState({\n      leftPage: currentPage,\n      rightPage: currentPage + 1\n    })\n    preloadImages()\n  }, [currentPage])\n\n  // method\n  const onResize = () => {\n    setDisplayedPages(pageWidth * 2 > pageHeight ? 2 : 1)\n  }\n\n  const logEvery = () => {\n    console.log({\n      currentPage: currentPage,\n      displayedPages: displayedPages,\n      flip: flip,\n      hasPointerEvents: hasPointerEvents,\n      imageLoadCallback: imageLoadCallback,\n      leftPage: leftPage,\n      maxX: maxX,\n      minX: minX,\n      nImageLoad: nImageLoad,\n      nImageLoadTrigger: nImageLoadTrigger,\n      nPages: nPages,\n      pageHeight: pageHeight,\n      pageWidth: pageWidth,\n      preloadedImages: preloadImages,\n      rightPage: rightPage,\n      touchStartX: touchStartX,\n      touchStartY: touchStartY,\n      canFlipLeft: canFlipLeft,\n      canFlipRight: canFlipRight,\n      polygonArray: polygonArray,\n      polygonBgSize: polygonBgSize,\n      polygonWidth: polygonWidth,\n      polygonHeight: polygonHeight\n    });\n  }\n\n  const pageUrl = (page) => {\n    if (!pages[page]) return null\n    // if (!pages[page].url) return default\n    return pages[page].url || null;\n  }\n\n  const flipStart = async (direction, auto) => {\n    if (direction === 'left') {\n      if (displayedPages === 1) {\n        setFlip({\n          ...flip,\n          direction: direction,\n          frontImage: pageUrl(currentPage - 1),\n          backImage: null\n        })\n      } else {\n        setFlip({\n          ...flip,\n          direction: direction,\n          frontImage: pageUrl(leftPage),\n          backImage: pageUrl(currentPage - displayedPages + 1)\n        })\n      }\n    } else {\n      if (displayedPages === 1) {\n        setFlip({\n          ...flip,\n          direction: direction,\n          frontImage: pageUrl(currentPage),\n          backImage: null\n        })\n      } else {\n        setFlip({\n          ...flip,\n          direction: direction,\n          frontImage: pageUrl(rightPage),\n          backImage: pageUrl(currentPage + displayedPages)\n        })\n      }\n    }\n    return requestAnimationFrame(() => {\n      return requestAnimationFrame(() => {\n        if (direction === 'left') {\n          if (displayedPages === 2) {\n            FlipBookContainer.setState({\n              leftPage: currentPage - displayedPages\n            })\n          }\n        } else {\n          if (displayedPages === 1) {\n            FlipBookContainer.setState({\n              leftPage: currentPage + displayedPages\n            })\n          } else {  \n            FlipBookContainer.setState({\n              rightPage: currentPage + 1 + displayedPages\n            })\n          }\n        }\n        if (auto) {\n          return flipAuto(true);\n        }\n      });\n    });\n  }\n\n  const flipAuto = ease => {\n    var animate, duration, startRatio, t0;\n      t0 = Date.now();\n      duration = flipDuration * (1 - flip.progress);\n      startRatio = flip.progress;\n      setFlip({\n        ...flip,\n        auto: true\n      })\n      animate = () => {\n        return requestAnimationFrame(() => {\n          var ratio, t;\n          t = Date.now() - t0;\n          ratio = startRatio + t / duration;\n          if (ratio > 1) {\n            ratio = 1;\n          }\n          setFlip({\n            ...flip,\n            progress: ease ? easeInOut(ratio) : ratio\n          })\n          if (ratio < 1) {\n            return animate();\n          } else {\n            if (flip.direction === 'left') {\n              setCurrentPage(currentPage - displayedPages)\n            } else {\n              setCurrentPage(currentPage + displayedPages)\n            }\n            if (displayedPages === 1 && flip.direction === 'right') {\n              setFlip({\n                ...flip,\n                direction: null\n              })\n            } else {\n              onImageLoad(1, () => {\n                console.log('callback here');\n                setFlip({\n                  ...flip,\n                  direction: null,\n                  auto: false,\n                  progress: 0\n                })\n              });\n            }\n          }\n        });\n      };\n      return animate();\n  }\n\n  const flipRevert = () => {\n    var animate, duration, startRatio, t0;\n      t0 = Date.now();\n      duration = flipDuration * flip.progress;\n      startRatio = flip.progress;\n      setFlip({\n        ...flip,\n        auto: true\n      })\n      animate = () => {\n        return requestAnimationFrame(() => {\n          var ratio, t;\n          t = Date.now() - t0;\n          ratio = startRatio - startRatio * t / duration;\n          if (ratio < 0) {\n            ratio = 0;\n          }\n          setFlip({\n            ...flip,\n            progress: ratio\n          })\n          if (ratio > 0) {\n            return animate();\n          } else {\n            FlipBookContainer.setState({\n              leftPage: currentPage,\n              rightPage: currentPage + 1\n            })\n            if (displayedPages === 1 && flip.direction === 'left') {\n              setFlip({\n                ...flip,\n                direction: null,\n                auto: false\n              })\n            } else {\n              onImageLoad(1, () => {\n                setFlip({\n                  ...flip,\n                  direction: null,\n                  auto: false\n                })\n              });\n            }\n            return false;\n          }\n        });\n      };\n      return animate();\n  }\n\n  const onImageLoad = (trigger, cb) => {\n    setNImageLoad(0)\n    setNImageLoadTrigger(trigger)\n    setImageLoadCallback(cb)\n  }\n\n  const didLoadImage = ev => {\n    if (!imageLoadCallback) {\n      return;\n    }\n    imageLoadCallback()\n  }\n\n  const swipeStart = touch => {\n    setTouchStartX(touch.pageX);\n    setTouchStartY(touch.pageY);\n  }\n\n  const swipeMove = touch => {\n    var x, y;\n    if (touchStartX == null) {\n      return;\n    }\n    x = touch.pageX - touchStartX;\n    y = touch.pageY - touchStartY;\n    if (Math.abs(y) > Math.abs(x)) {\n      return;\n    }\n    if (x > 0) {\n      if (flip.direction === null && canFlipLeft && x >= 5) {\n        flipStart('left', false);\n      }\n      if (flip.direction === 'left') {\n        setFlip({\n          ...flip,\n          progress: x / pageWidth < 1 ? x / pageWidth : 1\n        })\n      }\n    } else {\n      if (flip.direction === null && canFlipRight && x <= -5) {\n        flipStart('right', false);\n      }\n      if (flip.direction === 'right') {\n        setFlip({\n          ...flip,\n          progress: -x / pageWidth < 1 ? -x / pageWidth : 1\n        })\n      }\n    }\n    return true;\n  }\n\n  const swipeEnd = touch => {\n    if (flip.direction !== null && !flip.auto) {\n      if (flip.progress > 1 / 4) {\n        flipAuto(false);\n      } else {\n        flipRevert();\n      }\n    }\n    setTouchStartX(null)\n    return null;\n  }\n\n  const onMouseDown = ev => {\n    if (hasPointerEvents) {\n      return;\n    }\n    if (ev.which && ev.which !== 1) {\n      return;\n    }\n    return swipeStart(ev);\n  }\n\n  const onMouseMove = ev => {\n    if (hasPointerEvents) {\n      return;\n    }\n    if (ev.which && ev.which !== 1) {\n      return;\n    } // Ignore right-click\n    return swipeMove(ev);\n  }\n\n  const onMouseUp = ev => {\n    if (!hasPointerEvents) {\n      return swipeEnd(ev)\n    }\n  }\n\n  const preloadImages = () => {\n    var i, img, j, ref, ref1, results, url;\n    if (Object.keys(preloadedImages).length >= 10) {\n      this.preloadedImages = {};\n    }\n    results = [];\n    for (i = j = ref = currentPage - 3, ref1 = currentPage + 3; (ref <= ref1 ? j <= ref1 : j >= ref1); i = ref <= ref1 ? ++j : --j) {\n      url = pageUrl(i);\n      if (url) {\n        if (!preloadedImages[url]) {\n          img = new Image();\n          img.src = url;\n          results.push(preloadedImages[url] = img);\n        } else {\n          results.push(void 0);\n        }\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  return (\n    <Subscribe to={[FlipBookContainer]}>\n      {flipBookContainer => {\n        const {\n          pageWidth,\n          pageHeight,\n          leftPage,\n          rightPage\n        } = flipBookContainer.state\n        return (\n          <div\n            onMouseDown={ev => onMouseDown(ev)}\n            onMouseMove={ev => onMouseMove(ev)}\n            onMouseUp={ev => onMouseUp(ev)}\n            style={{\n              width: pageWidth * displayedPages + 'px',\n              height: pageHeight + 'px',\n              margin: 'auto'  \n            }}\n          >\n            <div className=\"viewport\">\n            <div className=\"container\" style={{ width: '100%' }}>\n              <div\n                className=\"centering-box\"\n                style={{ width: pageWidth * displayedPages }}\n              >\n                { pageUrl(leftPage) && <img\n                  className=\"page fixed\"\n                  style={{\n                    width: pageWidth + 'px',\n                    height: pageHeight + 'px',\n                    left: xMargin + 'px',\n                    top: spaceTop + 'px'\n                  }}\n                  src={pageUrl(leftPage)}\n                  onLoad={($event) => didLoadImage($event)}\n                />}\n                { displayedPages === 2 && pageUrl(rightPage) && <img\n                  className=\"page fixed\"\n                  style={{\n                    width: pageWidth + 'px',\n                    height: pageHeight + 'px',\n                    left: pageWidth + 'px',\n                    top: spaceTop + 'px'\n                  }}\n                  src={pageUrl(rightPage)}\n                  onLoad={($event) => didLoadImage($event)}\n                />}\n                {\n                  polygonArray.map((item, index) => {\n                    return (\n                      <div\n                      key={ index }\n                      className={ item[1] ? 'polygon blank' : 'polygon'}\n                      style={{\n                        backgroundImage: item[1],\n                        backgroundSize: polygonBgSize,\n                        backgroundPosition: item[3],\n                        width: polygonWidth,\n                        height: polygonHeight,\n                        transform: item[4],\n                        zIndex: item[5]\n                      }}\n                      >\n                      {\n                        item[2].length && <div\n                          className=\"lighting\"\n                          style={{ backgroundImage: item[2] }}\n                        />\n                      }\n                      </div>\n                    )\n                  })\n                }\n                </div>\n                <div className=\"guard\" />\n              </div>\n            </div>\n          </div>\n        );\n      }}\n    </Subscribe>\n  );\n};\n\nexport default Flipbook;\n","C:\\inrich.peter\\flip-book-react-master\\src\\helper.js",[],"C:\\inrich.peter\\flip-book-react-master\\src\\computed.js",[],"C:\\inrich.peter\\flip-book-react-master\\src\\Stores\\Flipbook.js",[],"C:\\inrich.peter\\flip-book-react-master\\src\\matrix.js",[],{"ruleId":"46","severity":1,"message":"47","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":25},{"ruleId":"46","severity":1,"message":"50","line":35,"column":18,"nodeType":"48","messageId":"49","endLine":35,"endColumn":27},{"ruleId":"46","severity":1,"message":"51","line":43,"column":28,"nodeType":"48","messageId":"49","endLine":43,"endColumn":47},{"ruleId":"46","severity":1,"message":"52","line":46,"column":27,"nodeType":"48","messageId":"49","endLine":46,"endColumn":45},{"ruleId":"46","severity":1,"message":"53","line":48,"column":19,"nodeType":"48","messageId":"49","endLine":48,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":60,"column":6,"nodeType":"56","endLine":60,"endColumn":8,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":68,"column":6,"nodeType":"56","endLine":68,"endColumn":19,"suggestions":"59"},{"ruleId":"46","severity":1,"message":"60","line":75,"column":9,"nodeType":"48","messageId":"49","endLine":75,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":409,"column":40,"nodeType":"63","endLine":419,"endColumn":19},{"ruleId":"61","severity":1,"message":"62","line":420,"column":65,"nodeType":"63","endLine":430,"endColumn":19},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setNPages' is assigned a value but never used.","'setHasPointerEvents' is assigned a value but never used.","'setPreloadedImages' is assigned a value but never used.","'setXMargin' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onResize' and 'preloadImages'. Either include them or remove the dependency array.","ArrayExpression",["64"],"React Hook useEffect has a missing dependency: 'preloadImages'. Either include it or remove the dependency array.",["65"],"'logEvery' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [onResize, preloadImages]",{"range":"70","text":"71"},"Update the dependencies array to be: [currentPage, preloadImages]",{"range":"72","text":"73"},[1997,1999],"[onResize, preloadImages]",[2150,2163],"[currentPage, preloadImages]"]